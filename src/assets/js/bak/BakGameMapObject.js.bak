import {GameObject} from "./GameObject";
import {Wall} from "@/assets/js/Wall";
import {Snake} from "@/assets/js/Snake";


export class GameMapObject extends GameObject {
    constructor(ctx, parent, store) {
        super();

        this.ctx = ctx;
        this.parent = parent;
        this.store = store;
        this.L = 0;

        this.rows = 13;
        this.columns = 14;

        this.innerWallsCount = 20;
        this.walls = [];

        this.snakes = [
            new Snake({id: 0, color: "#4876EC", r: this.rows - 2, c: 1}, this),
            new Snake({id: 1, color: "#F94848", r: 1, c: this.cols - 2}, this),
        ];
    }

    createWalls() {
        const g = this.store.state.pk.gamemap;

        for (let r = 0; r < this.rows; r++) {
            for (let c = 0; c < this.columns; c++) {
                if (g[r][c]) {
                    this.walls.push(new Wall(r, c, this));
                }
            }
        }
    }

    addListeningEvents() {
        console.log(this.store.state.record);

        if (this.store.state.record.is_record) {
            let k = 0;

            const aSteps = this.store.state.record.a_steps;
            const bSteps = this.store.state.record.b_steps;
            const loser = this.store.state.record.record_loser;
            const [snakeA, snakeB] = this.snakes;
            const interval_id = setInterval(() => {
                if (k >= aSteps.length - 1) {
                    if (loser === "all" || loser === "A") {
                        snakeA.status = "die";
                    }
                    if (loser === "all" || loser === "B") {
                        snakeB.status = "die";
                    }
                    clearInterval(interval_id);
                } else {
                    snakeA.setDirection(parseInt(aSteps[k]));
                    snakeB.setDirection(parseInt(bSteps[k]));
                }
                k++;
            }, 300);
        } else {
            this.ctx.canvas.focus();

            this.ctx.canvas.addEventListener("keydown", e => {
                let d = -1;
                if (e.key === 'w') d = 0;
                else if (e.key === 'd') d = 1;
                else if (e.key === 's') d = 2;
                else if (e.key === 'a') d = 3;

                if (d >= 0) {
                    this.store.state.pk.socket.send(JSON.stringify({
                        event: "move",
                        direction: d,
                    }));
                }
            });
        }
    }

    start() {
        this.createWalls();
        this.addListeningEvents();
    }

    updateSize() {
        // canvas为正方形，是多个小正方形组成，每个小正方形的边长为L
        // canvas的行数，列数和父元素的行数，列数一致

        // 小正方形的边长
        let sideLength = Math.min(this.parent.clientWidth / this.columns, this.parent.clientHeight / this.rows);
        // 向下取整，消除浮点数造成的空隙
        this.L = Math.floor(sideLength);

        // canvas的宽度和高度
        this.ctx.canvas.width = this.L * this.columns;
        this.ctx.canvas.height = this.L * this.rows;
    }

    isReady() {  // 判断两条蛇是否都准备好下一回合了
        for (const snake of this.snakes) {
            if (snake.status !== "idle") return false;
            if (snake.direction === -1) return false;
        }
        return true;
    }

    nextStep() {  // 让两条蛇进入下一回合
        for (const snake of this.snakes) {
            snake.nextStep();
        }
    }

    isValid(cell) {  // 检测目标位置是否合法：没有撞到两条蛇的身体和障碍物
        for (const wall of this.walls) {
            if (wall.r === cell.r && wall.c === cell.c)
                return false;
        }

        for (const snake of this.snakes) {
            let k = snake.cells.length;
            if (!snake.isTailIncreasing()) {  // 当蛇尾会前进的时候，蛇尾不要判断
                k--;
            }
            for (let i = 0; i < k; i++) {
                if (snake.cells[i].r === cell.r && snake.cells[i].c === cell.c)
                    return false;
            }
        }

        return true;
    }

    update() {
        this.updateSize();
        if (this.isReady()) {
            this.nextStep();
        }
        this.render();
    }

    render() {
        const color_even = "#AAD751", color_odd = "#A2D149";
        // r 遍历行
        for (let r = 0; r < this.rows; r++) {
            // c 遍历列
            for (let c = 0; c < this.columns; c++) {
                if ((r + c) % 2 === 0) {
                    this.ctx.fillStyle = color_even;
                } else {
                    this.ctx.fillStyle = color_odd;
                }
                // x（第一个参数）:绘制起点坐标，y（第二个参数）:绘制起点坐标，第三个参数:绘制宽度，第四个参数:绘制高度
                this.ctx.fillRect(c * this.L, r * this.L, this.L, this.L);
            }
        }
    }
}